import styled from 'styled-components';
import { useDispatch, useSelector } from 'react-redux';
import { useEffect, useRef, useState, useMemo } from 'react';
import type { RootState } from '@/store/store';
import { selectFile, moveNodeAPI } from '@/store/fsSlice';
import { renameFileAPI } from '@/store/fsSlice';

const Wrap = styled.div`
  padding: 20px;
  background: ${({ theme }) => theme.colors.surface};
  height: 100%;
  overflow-y: auto;
`;

const Row = styled.div<{ selected?: boolean }>`
  display: grid;
  grid-template-columns: 1fr 100px;
  align-items: center;
  height: 48px;
  padding: 0 16px;
  border-radius: ${({ theme }) => theme.radius.sm};
  cursor: pointer;
  background: ${({ selected, theme }) => (selected ? theme.colors.primary : 'transparent')};
  color: ${({ selected, theme }) => (selected ? '#fff' : theme.colors.text)};
  font-size: 14px;
  font-weight: 500;
  transition: all 0.2s ease;
  margin-bottom: 4px;
  border: 1px solid transparent;
  
  &:hover { 
    background: ${({ selected, theme }) => (selected ? theme.colors.primary : theme.colors.surfaceAlt)};
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0,0,0,.1);
  }
`;

const Title = styled.div`
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  display: flex;
  align-items: center;
  gap: 8px;
`;

const Type = styled.div`
  justify-self: end;
  color: ${({ theme }) => theme.colors.textMuted};
  background: ${({ theme }) => theme.colors.surfaceAlt};
  border: 1px solid ${({ theme }) => theme.colors.border};
  height: 24px;
  padding: 0 8px;
  display: inline-flex;
  align-items: center;
  border-radius: 6px;
  font-size: 11px;
  font-weight: 500;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
`;

function find(node: any, id: string): any | null {
  if (node.id === id) return node;
  for (const c of node.children ?? []) {
    const f = find(c, id);
    if (f) return f;
  }
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ
function findAllFiles(node: any, query: string): any[] {
  if (!node) return [];
  
  let results: any[] = [];
  const searchQuery = query.trim().toLowerCase();
  
  if (!searchQuery) return [];
  
  // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
  if (node.type === 'file') {
    if (node.name && typeof node.name === 'string') {
      const fileName = node.name.toLowerCase();
      if (fileName.includes(searchQuery)) {
        results.push(node);
      }
    }
  }
  
  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö (–¥–ª—è –ø–∞–ø–æ–∫ –∏ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞)
  // –ö–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª —Ç–æ–∂–µ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å children, –ø–æ—ç—Ç–æ–º—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
  if (node.children && Array.isArray(node.children)) {
    for (const child of node.children) {
      if (child) {
        const childResults = findAllFiles(child, query);
        results = results.concat(childResults);
      }
    }
  }
  
  return results;
}

export function FilesList() {
  const dispatch: any = useDispatch();
  const { root, selectedFolderId, selectedFileId, search, searchType, searchResults, searchLoading, searchError } = useSelector((s: RootState) => s.fs);
  const [editingId, setEditingId] = useState<string | null>(null);
  const [editingValue, setEditingValue] = useState<string>('');
  const [draggingId, setDraggingId] = useState<string | null>(null);
  const [dropTargetId, setDropTargetId] = useState<string | null>(null);
  const folder = find(root, selectedFolderId);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º useMemo –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const filtered = useMemo(() => {
    let result: any[] = [];
    
    if (search && search.trim().length > 0) {
      console.log('üîç –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–µ–Ω:', { search, searchType, rootExists: !!root, rootChildren: root?.children?.length });
      
      if (searchType === 'ai') {
        // AI –ø–æ–∏—Å–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–ø–æ –≤—Å–µ–º—É –¥–µ—Ä–µ–≤—É)
        result = Array.isArray(searchResults) 
          ? searchResults.filter((item: any) => item && item.type === 'file')
          : [];
        console.log('ü§ñ AI –ø–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', result.length);
      } else {
        // –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ - –∏—â–µ–º –ø–æ –≤—Å–µ–º—É –¥–µ—Ä–µ–≤—É —Ñ–∞–π–ª–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        try {
          if (root && root.children) {
            result = findAllFiles(root, search);
            console.log('üìÑ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', result.length, result.map((f: any) => f.name));
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –º–∞—Å—Å–∏–≤
            if (!Array.isArray(result)) {
              result = [];
            }
          } else {
            console.warn('‚ö†Ô∏è Root –∏–ª–∏ root.children –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã', { root, hasChildren: !!root?.children });
            result = [];
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error);
          result = [];
        }
      }
    } else {
      // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
      result = (folder?.children ?? []).filter((c: any) => c && c.type === 'file');
    }
    
    return result;
  }, [search, searchType, root, searchResults, folder]);
  
  // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π useEffect –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  useEffect(() => {
    if (search && search.trim().length > 0) {
      console.log('üìù –ü–æ–∏—Å–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è:', { search, searchType, filteredCount: filtered.length });
    }
  }, [search, searchType, filtered.length]);

  function getTypeLabel(mime?: string): string {
    if (!mime) return 'file';
    if (mime === 'application/pdf') return 'pdf';
    if (mime === 'text/plain') return 'txt';
    if (mime === 'text/markdown') return 'md';
    if (mime.startsWith('image/')) return mime.split('/')[1];
    if (mime.endsWith('wordprocessingml.document')) return 'docx';
    return mime.split('/').pop() || 'file';
  }

  function getFileIcon(mime?: string): string {
    if (!mime) return 'üìÑ';
    if (mime === 'application/pdf') return 'üìÑ';
    if (mime === 'text/markdown') return 'üìù';
    if (mime === 'text/plain') return 'üìÑ';
    if (mime.startsWith('image/')) return 'üñºÔ∏è';
    if (mime.endsWith('wordprocessingml.document')) return 'üìÑ';
    return 'üìÑ';
  }

  const inputRef = useRef<HTMLInputElement | null>(null);
  useEffect(() => {
    if (editingId && inputRef.current) {
      inputRef.current.focus();
      inputRef.current.select();
    }
  }, [editingId]);

  const commitRename = async (id: string) => {
    const newName = editingValue.trim();
    if (newName && filtered.find((f: any) => f.id === id)?.name !== newName) {
      await dispatch(renameFileAPI({ uuid: id, name: newName }));
    }
    setEditingId(null);
  };

  return (
    <Wrap>
      {search && search.trim().length > 0 && searchType === 'ai' && searchLoading && (
        <div style={{ padding: '20px', textAlign: 'center', color: '#888' }}>
          AI –ø–æ–∏—Å–∫...
        </div>
      )}
      {searchError && search && search.trim().length > 0 && searchType === 'ai' && (
        <div style={{ padding: '20px', textAlign: 'center', color: '#e74c3c' }}>
          –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {searchError}
        </div>
      )}
      {filtered.length === 0 && search && search.trim().length > 0 && 
       (searchType === 'local' || (!searchLoading && !searchError)) && (
        <div style={{ padding: '20px', textAlign: 'center', color: '#888' }}>
          –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{search}"
          {searchType === 'local' && (
            <div style={{ fontSize: '12px', marginTop: '8px', color: '#aaa' }}>
              –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ –≤—Å–µ–º—É –¥–µ—Ä–µ–≤—É —Ñ–∞–π–ª–æ–≤
            </div>
          )}
        </div>
      )}
      {filtered.map((f: any) => (
        <Row
          key={f.id}
          selected={selectedFileId === f.id}
          style={{
            boxShadow: draggingId === f.id ? '0 0 8px #3178ff' :
              dropTargetId === f.id ? 'inset 0 0 0 2px #31a8ff' : undefined
          }}
          draggable
          onDragStart={e => {
            setDraggingId(f.id);
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/plain', f.id);
          }}
          onDragEnd={() => {
            setDraggingId(null);
            setDropTargetId(null);
          }}
          onDragOver={e => {
            e.preventDefault();
          }}
          onDrop={e => {
            e.preventDefault();
            setDropTargetId(null);
          }}
          onClick={() => dispatch(selectFile(f.id))}
          onDoubleClick={() => {
            setEditingId(f.id);
            setEditingValue(f.name);
          }}
        >
          {editingId === f.id ? (
            <input
              ref={inputRef}
              value={editingValue}
              onChange={(e) => setEditingValue(e.target.value)}
              onBlur={() => commitRename(f.id)}
              onKeyDown={(e) => {
                if (e.key === 'Enter') commitRename(f.id);
                if (e.key === 'Escape') setEditingId(null);
              }}
              style={{
                height: 28,
                borderRadius: 8,
                border: '1px solid rgba(255,255,255,0.08)',
                background: 'transparent',
                color: 'inherit',
                padding: '0 8px',
                outline: 'none',
                width: '100%'
              }}
            />
          ) : (
            <Title>
              <span>{getFileIcon(f.mime)}</span>
              {f.name}
            </Title>
          )}
          <Type>{getTypeLabel(f.mime)}</Type>
        </Row>
      ))}
      {/* –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º drop –Ω–∞ —Å–∞–º —Å–ø–∏—Å–æ–∫ ‚Äî –µ—Å–ª–∏ drag file, drop –Ω–∞ —Ñ–æ–Ω = file dvig –≤ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É (–∏–º–µ–µ—Ç —Å–º—ã—Å–ª —Ç–æ–ª—å–∫–æ –ø—Ä–∏ drag —Å –¥—Ä—É–≥–æ–π –≤–∫–ª–∞–¥–∫–∏/—É—Ä–æ–≤–Ω—è) */}
      <div
        style={{height:8, width:'100%'}}
        onDragOver={e => {e.preventDefault();}}
        onDrop={e => {
          // –û–ø—Ä–µ–¥–µ–ª–∏–º id drag-—ç–ª–µ–º–µ–Ω—Ç–∞
          const id = e.dataTransfer.getData('text/plain');
          if (id && id !== selectedFolderId && folder?.id) {
            dispatch(moveNodeAPI({ uuid: id, parent_uuid: folder.id }));
          }
        }}
      />
    </Wrap>
  );
}


